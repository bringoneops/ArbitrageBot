name: CI

on:
  push:
    branches: [ "main" ]
    paths:
      - "**/*.rs"
      - "Cargo.*"
      - ".trunk/**"
      - ".github/workflows/**"
      - "**/Dockerfile*"
      - "**/*terraform*/**"
      - "**/*.tf"
  pull_request:
    branches: [ "main" ]
    paths:
      - "**/*.rs"
      - "Cargo.*"
      - ".trunk/**"
      - ".github/workflows/**"
      - "**/Dockerfile*"
      - "**/*terraform*/**"
      - "**/*.tf"

# âœ… CKV2_GHA_1: least privilege at workflow level
permissions:
  contents: read
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  quality:
    name: Lint / Format (Trunk or Rust fallback)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - id: detect_trunk
        name: Detect Trunk config
        shell: bash
        run: |
          if [ -f .trunk/trunk.yaml ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Cache Trunk tools
        if: steps.detect_trunk.outputs.present == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/trunk
          key: ${{ runner.os }}-trunk-${{ hashFiles('.trunk/trunk.yaml') }}
          restore-keys: ${{ runner.os }}-trunk-

      - name: Install Trunk
        if: steps.detect_trunk.outputs.present == 'true'
        shell: bash
        run: |
          set -euxo pipefail
          curl -fsSL https://get.trunk.io | bash
          trunk install

      - name: Run Trunk fmt
        if: steps.detect_trunk.outputs.present == 'true'
        run: trunk fmt --ci

      - name: Run Trunk check
        if: steps.detect_trunk.outputs.present == 'true'
        run: trunk check --ci

      # Fallback if Trunk isn't configured
      - name: Set up Rust (fallback)
        if: steps.detect_trunk.outputs.present == 'false'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cargo fmt (fallback)
        if: steps.detect_trunk.outputs.present == 'false'
        run: cargo fmt --all -- --check

      - name: Cargo clippy (fallback)
        if: steps.detect_trunk.outputs.present == 'false'
        run: cargo clippy --all-targets --all-features -- -D warnings

  test_cov:
    name: Tests + Coverage (nextest + llvm-cov)
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      # Compile cache (smart) + compiler cache (very fast rebuilds)
      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Set sccache env
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Rust cache (target/registry)
        uses: Swatinem/rust-cache@v2

      - name: Install nextest (fast test runner)
        uses: taiki-e/install-action@nextest

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Build (check)
        run: cargo check --all --locked

      - name: Run unit tests (nextest)
        run: cargo nextest run --all --locked --no-fail-fast

      - name: Generate coverage (LCOV)
        run: |
          cargo llvm-cov nextest --all --locked --lcov --output-path lcov.info
          # Optional: fail build if under threshold (e.g., 60% lines)
          # cargo llvm-cov --fail-under-lines 60

      - name: Coverage summary
        run: |
          echo "### Coverage (llvm-cov report)" >> $GITHUB_STEP_SUMMARY
          cargo llvm-cov report --summary-only >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: lcov.info
          if-no-files-found: error
          retention-days: 7

  checkov:
    name: Bridgecrew / Checkov (SARIF upload)
    runs-on: ubuntu-latest
    # separate minimal permissions for code scanning upload
    permissions:
      contents: read
      actions: read   # needed for status in upload step on private repos
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          output_format: cli,sarif
          output_file_path: console,results.sarif
          # uncomment to avoid failing CI on findings while you tune rules:
          # soft_fail: true

      - name: Upload SARIF file
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
